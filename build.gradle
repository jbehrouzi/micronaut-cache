plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.6.7"
}

version = "0.1"
group = "com.example"

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("ir.dantech.cif.*")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor "io.micronaut.data:micronaut-data-processor"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa"
    implementation "io.micronaut.sql:micronaut-hibernate-jpa"
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut:micronaut-validation")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.h2database:h2")
    runtimeOnly "com.oracle.database.jdbc:ojdbc5:11.2.0.4"

    implementation "javax.cache:cache-api"
    implementation "org.hibernate:hibernate-jcache"
    implementation "io.micronaut.cache:micronaut-cache-core"
    implementation "org.redisson:redisson-micronaut-30:3.19.0"
    runtimeOnly "com.h2database:h2"

    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.assertj:assertj-core"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

}


application {
    mainClass.set("com.example.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}



